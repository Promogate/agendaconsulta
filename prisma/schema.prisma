generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  passwordHash    String
  address         String?
  phone           String?
  isPhoneWhatsapp Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  role            UserRole @default(PATIENT)

  appointments Appointment[]

  @@map("users")
}

model Medic {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  passwordHash    String
  crm             String?
  phone           String?
  isPhoneWhatsapp Boolean           @default(false)
  specialties     String[]
  clinics         MedicsOnClinics[]
  schedules       Schedule[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  Appointment Appointment[]

  @@map("medics")
}

model Clinic {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  phone           String
  address         String
  isPhoneWhatsapp Boolean  @default(false)
  mainClinicId    String?
  mainClinic      Clinic?  @relation("ClinicHierarchy", fields: [mainClinicId], references: [id])
  branches        Clinic[] @relation("ClinicHierarchy")

  medics MedicsOnClinics[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  Appointment Appointment[]

  @@map("clinics")
}

model MedicsOnClinics {
  medic     Medic  @relation(fields: [medicId], references: [id])
  medicId   String @map("medic_id")
  clinic    Clinic @relation(fields: [clinicId], references: [id])
  clinicId  String @map("clinic_id")
  specialty String
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([medicId, clinicId])
}

model Schedule {
  id        String  @id @default(cuid())
  medic     Medic   @relation(fields: [medicId], references: [id])
  medicId   String  @map("medic_id")
  dayOfWeek Int
  startTime String
  endTime   String
  available Boolean @default(true)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  Appointment Appointment[]

  @@map("schedules")
}

model Appointment {
  id         String            @id @default(cuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  medic      Medic             @relation(fields: [medicId], references: [id])
  medicId    String
  clinic     Clinic            @relation(fields: [clinicId], references: [id])
  clinicId   String
  scheduleId String?
  specialty  String
  schedule   Schedule?         @relation(fields: [scheduleId], references: [id])
  status     AppointmentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("appointments")
}

enum UserRole {
  PATIENT
  MEDIC
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
